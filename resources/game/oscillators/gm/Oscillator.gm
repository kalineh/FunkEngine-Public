
global MakeOscillator = function( a_args )
{
    local Oscillator = table();

    Oscillator.phase = a_args.phase;
    Oscillator.frequency = a_args.frequency;
    Oscillator.amplitude = a_args.amplitude;

    Oscillator.pos = a_args.pos;
    Oscillator.radius = a_args.radius;

    Oscillator.Init = function()
    {
    };

    Oscillator.GetAngle = function( a_time )
    {
        assert( ?a_time );

        local t = .phase + a_time * .frequency;
        local s = sin( t ) * degtorad( 180 );

        return s * .amplitude;
    };

    Oscillator.GetV2 = function( a_time )
    {
        assert( ?a_time );

        local t = .phase + a_time * .frequency;
        local s = sin( t ) * degtorad( 180 );
        local c = cos( t ) * degtorad( 180 );
        local v = v2( c, s );

        return v * .amplitude;
    };

    Oscillator.Draw = function( a_base_position )
    {
        local time = g_game.time;
        local hsv = v3( .frequency, 0.5f, 1.0f );
        local rgb = HSVtoRGB( hsv );
        local pos = a_base_position + .pos + .GetV2( time );
        local radius = .radius;

        Imm.Color( rgb, 1.0f );
        Imm.DrawCircle( pos, radius );
    };

    return Oscillator;
};


global MakeOscillatorCircle = function()
{
    local OscillatorCircle = table();

    OscillatorCircle.threads = table(); 
    OscillatorCircle.oscillators = table();

    OscillatorCircle.settings = table();
    OscillatorCircle.settings.count = 32;
    OscillatorCircle.settings.dimen_min = 0.0f;
    OscillatorCircle.settings.dimen_max = 0.0f;
    OscillatorCircle.settings.radius_min = 1.0f;
    OscillatorCircle.settings.radius_max = 5.0f;
    OscillatorCircle.settings.phase_min = 0.0f;
    OscillatorCircle.settings.phase_max = 1.0f;
    OscillatorCircle.settings.frequency_min = 0.0f;
    OscillatorCircle.settings.frequency_max = 2.0f;
    OscillatorCircle.settings.amplitude_min = 32.0f;
    OscillatorCircle.settings.amplitude_max = 48.0f;

    OscillatorCircle.Init = function()
    {
        .Reset();
    };

    OscillatorCircle.Release = function()
    {
        tableClear( .oscillators );

        KillThreads( .threads );
    };

    OscillatorCircle.Reset = function()
    {
        tableClear( .oscillators );

        KillThreads( .threads );

        local count = .settings.count;

        local dimen_min = g_core.screenDimen * .settings.dimen_min;
        local dimen_max = g_core.screenDimen * .settings.dimen_max;
        local radius_min = .settings.radius_min;
        local radius_max = .settings.radius_max;
        local phase_min = .settings.phase_min;
        local phase_max = .settings.phase_max;
        local frequency_min = .settings.frequency_min;
        local frequency_max = .settings.frequency_max;
        local amplitude_min = .settings.amplitude_min;
        local amplitude_max = .settings.amplitude_max;

        for ( i = 0; i < count; i += 1 )
        {
            local args = {
                pos = v2( randfloat( dimen_min.x, dimen_max.x ), randfloat( dimen_min.y, dimen_max.y ) ),
                radius = randfloat( radius_min, radius_max ),
                phase = randfloat( phase_min, phase_max ),
                frequency = randfloat( frequency_min, frequency_max ),
                amplitude = randfloat( amplitude_min, amplitude_max ),
            };

            local oscillator = MakeOscillator( args );

            .oscillators[] = oscillator;
        }

        .threads.update = this:thread( .Update );
        .threads.draw = this:thread( .Draw );
        .threads.gui = this:thread( .Gui );
    };

    OscillatorCircle.Update = function()
    {
        while ( true )
        {
            // sum field average
            // - or distance based
            // - or nearest neighbour
            // - or other?

            yield();
        }
    };

    OscillatorCircle.GetFieldAverageV2 = function()
    {
        local time = g_game.time;
        local average = v2( 0.0f );

        foreach ( oscillator in .oscillators )
        {
            local v = oscillator.GetV2( time );
            
            average += v;
        }

        average /= tableCount( .oscillators ).Float();

        return average;
    };

    OscillatorCircle.GetFieldAverageAngle = function()
    {
        local time = g_game.time;
        local average = 0.0f;

        foreach ( oscillator in .oscillators )
        {
            local v = oscillator.GetAngle( time );
            
            average += v;
        }

        average /= tableCount( .oscillators ).Float();

        return average;
    };

    OscillatorCircle.Draw = function()
    {
        local draw = function()
        {
    		Imm.BeginDefaultShader();
    		Imm.BeginDraw();

            local base_position = g_core.screenDimen * 0.5f;

            foreach ( oscillator in .oscillators )
            {
                oscillator.Draw( base_position );
            }

            local average = .GetFieldAverageV2();

            Imm.Color( Gfx.RED, 1.0f );
            Imm.DrawCircle( base_position + average, 8.0f );

    		Imm.EndDraw();
    		Imm.EndDefaultShader();
        };

        while ( true )
        {
            RegisterDraw( DrawLayers.Scene, draw, this );
            yield();
        }
    };

    OscillatorCircle.Gui = function()
    {
        local gui = function()
        {
    		Gui.Header( "Settings" );

            local previous = tableDuplicate( .settings );

            .settings.count = Gui.SliderInt( "Count", .settings.count, 1, 1024 );
            //.settings.dimen_min = Gui.SliderFloat( "Dimension (min)", .settings.dimen_min, 0.0f, 0.0f );
            //.settings.dimen_max = Gui.SliderFloat( "Dimension (max)", .settings.dimen_max, 0.0f, 0.0f );
            .settings.radius_min = Gui.SliderFloat( "Radius (min)", .settings.radius_min, 1.0f, 32.0f );
            .settings.radius_max = Gui.SliderFloat( "Radius (max)", .settings.radius_max, 1.0f, 32.0f );
            .settings.phase_min = Gui.SliderFloat( "Phase (min)", .settings.phase_min, 0.1f, 1.0f );
            .settings.phase_max = Gui.SliderFloat( "Phase (max)", .settings.phase_max, 0.1f, 1.0f );
            .settings.frequency_min = Gui.SliderFloat( "Frequency (min)", .settings.frequency_min, 0.0f, 4.0f );
            .settings.frequency_max = Gui.SliderFloat( "Frequency (max)", .settings.frequency_max, 0.0f, 4.0f );
            .settings.amplitude_min = Gui.SliderFloat( "Amplitude (min)", .settings.amplitude_min, 0.0f, 128.0f );
            .settings.amplitude_max = Gui.SliderFloat( "Amplitude (max)", .settings.amplitude_max, 0.0f, 128.0f );

            foreach ( key and value in previous )
            {
                if ( value != .settings[ key ] )
                {
                    .Reset();

                    break;
                }
            }

            local average_v2 = .GetFieldAverageV2();
            local average_angle = .GetFieldAverageAngle();

            Gui.Print( format( "average: %f (%f,%f)", average_angle, average_v2.x, average_v2.y ) );

            // TODO: shuffle

            if ( Gui.Button( "Reset" ) )
            {
                .Reset();
            }
        };

        while ( true )
        {
			RegisterGui( "OscillatorCircle", gui, this );

            yield();
        }
    };

    OscillatorCircle.Init();
    return OscillatorCircle;
};
